// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name  String
  imageUrl String 
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers Server[]
  members Member[]
  channels Channel[]
}

model Server {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  imageUrl String 
  inviteCode String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  role  MemberRole @default(GUEST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")
} 


enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  type ChannelType @default(TEXT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
}

model Message {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  fileUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String @db.ObjectId
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)
}

model Conversation {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberOneId String @db.ObjectId
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String @db.ObjectId
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]
}

model DirectMessage {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  fileUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberId String @db.ObjectId
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

}